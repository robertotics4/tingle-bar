{"ast":null,"code":"var _jsxFileName = \"/home/roberto/\\xC1rea de Trabalho/tingle-bar/src/pages/PainelEstabelecimento/pages/GerenciarCardapio/ModalCadCardapio.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport CurrencyInput from 'react-currency-input';\nimport Swal from 'sweetalert2';\nimport { Modal } from 'react-bootstrap';\nimport '../../../../components/Loading';\nimport api from '../../../../services/api';\nimport Loading from '../../../../components/Loading';\n\nfunction initialState() {\n  return {\n    titulo: '',\n    descricao: '',\n    valor: '',\n    categoria: '',\n    tempoEstimadoMin: 0,\n    tempoEstimadoMax: 0,\n    imagem: null,\n    isCozinha: false,\n    isCardapio: true\n  };\n}\n\nexport default function ModalCadCardapio(props) {\n  const [categorias, setCategorias] = useState([]);\n  const [valores, setValores] = useState(initialState);\n  const [isLoadingVisible, setLoadingVisible] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    cadastrarItem(data);\n  };\n\n  useEffect(() => {\n    getCategorias();\n  }, []);\n\n  const handleClose = () => props.setShowModal(false);\n\n  async function getCategorias() {\n    try {\n      const response = await api.get('/categoria?idEstabelecimento=' + props.idEstabelecimento);\n      setCategorias(response.data);\n      return response.data;\n    } catch (err) {\n      return err.response;\n    }\n  }\n\n  async function cadastrarItem(dados) {\n    setLoadingVisible(true);\n    const data = new FormData();\n    data.append(\"titulo\", dados.titulo);\n    data.append(\"descricao\", dados.descricao);\n    data.append(\"valor\", valores.valor);\n    data.append(\"tempo_estimado_min\", dados.tempoEstimadoMin);\n    data.append(\"tempo_estimado_max\", dados.tempoEstimadoMax);\n    data.append(\"categoria\", dados.categoria);\n    data.append(\"estabelecimento\", props.idEstabelecimento);\n    data.append(\"iscozinha\", valores.isCozinha ? 1 : 0);\n    data.append(\"iscardapio\", valores.isCardapio ? 1 : 0);\n    data.append(\"files\", valores.imagem);\n\n    try {\n      const response = await api.post('/Cardapio', data, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      if (response.status === 201 || response.status === 200) {\n        Swal.fire('Sucesso!', 'Item cadastrado com sucesso!', 'success');\n      }\n    } catch (err) {\n      if (err.response.status === 401 || err.response.status === 400) {\n        Swal.fire('Erro!', 'Falha ao cadastrar item', 'error');\n      }\n    } finally {\n      setLoadingVisible(false);\n      props.atualizarItens();\n      handleClose();\n    }\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setValores({ ...valores,\n      [name]: value\n    });\n  }\n\n  function handleChangeValor(event, maskedValue, floatValue) {\n    setValores({ ...valores,\n      valor: floatValue\n    });\n  }\n\n  function handleChangeImagem(e) {\n    setValores({ ...valores,\n      imagem: e.target.files[0]\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    show: props.showModal,\n    onHide: handleClose,\n    size: \"lg\",\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \"Cadastro de item no Card\\xE1pio\")), /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"tituloItemCardapio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    }\n  }, \"T\\xEDtulo\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"titulo\",\n    type: \"text\",\n    className: errors.titulo ? \"form-control is-invalid\" : \"form-control\",\n    id: \"tituloItemCardapio\",\n    placeholder: \"T\\xEDtulo do item\",\n    onChange: handleChange,\n    ref: register({\n      required: {\n        value: \"Required\",\n        message: \"O título é obrigatório\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 33\n    }\n  }, errors.titulo && errors.titulo.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"descricaoItemCardapio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    }\n  }, \"Descri\\xE7\\xE3o\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"descricao\",\n    type: \"text\",\n    className: errors.descricao ? \"form-control is-invalid\" : \"form-control\",\n    id: \"descricaoItemCardapio\",\n    placeholder: \"Descri\\xE7\\xE3o do item\",\n    onChange: handleChange,\n    ref: register({\n      required: {\n        value: \"Required\",\n        message: \"A descrição é obrigatória\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, errors.descricao && errors.descricao.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"valorItemCardapio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 33\n    }\n  }, \"Valor\"), /*#__PURE__*/React.createElement(CurrencyInput, {\n    name: \"valor\",\n    type: \"text\",\n    prefix: \"R$\",\n    decimalSeparator: \",\",\n    thousandSeparator: \".\",\n    value: valores.valor,\n    className: errors.valor ? \"form-control is-invalid\" : \"form-control\",\n    id: \"valorItemCardapio\",\n    onChangeEvent: handleChangeValor // ref={register({\n    //     required: {\n    //         value: \"Required\",\n    //         message: \"O valor é obrigatório\"\n    //     },\n    // })}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 33\n    }\n  }, errors.valorItemCardapio && errors.valorItemCardapio.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"categoriaItemCardapio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 33\n    }\n  }, \"Categoria\"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"categoria\",\n    className: errors.categoria ? \"form-control is-invalid\" : \"form-control\",\n    id: \"categoriaItemCardapio\",\n    ref: register({\n      required: {\n        value: \"Required\",\n        message: \"A categoria é obrigatória\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 37\n    }\n  }, \"Selecione\"), categorias.map((item, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.id,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 41\n    }\n  }, item.descricao))), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 33\n    }\n  }, errors.categoria && errors.categoria.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"tempoEstimadoMin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 33\n    }\n  }, \"Tempo estimado m\\xEDnimo\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"tempoEstimadoMin\",\n    type: \"number\",\n    className: errors.tempoEstimadoMin ? \"form-control is-invalid\" : \"form-control\",\n    id: \"tempoEstimadoMin\",\n    placeholder: \"Tempo m\\xEDnimo estimado\",\n    onChange: handleChange,\n    ref: register({\n      required: {\n        value: \"Required\",\n        message: \"O tempo estimado min é obrigatório\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 33\n    }\n  }, errors.tempoEstimadoMin && errors.tempoEstimadoMin.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"tempoEstimadoMax\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 33\n    }\n  }, \"Tempo estimado m\\xE1ximo\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"tempoEstimadoMax\",\n    type: \"number\",\n    className: errors.tempoEstimadoMax ? \"form-control is-invalid\" : \"form-control\",\n    id: \"tempoEstimadoMax\",\n    placeholder: \"Tempo m\\xEDnimo m\\xE1ximo\",\n    onChange: handleChange,\n    ref: register({\n      required: {\n        value: \"Required\",\n        message: \"O tempo estimado max é obrigatório\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 33\n    }\n  }, errors.tempoEstimadoMax && errors.tempoEstimadoMax.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"imagemItemCardapio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 33\n    }\n  }, \"Imagem do item\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"imagem\",\n    type: \"file\",\n    accept: \"image/png, image/jpeg\",\n    className: errors.imagem ? \"form-control-file is-invalid\" : \"form-control-file\",\n    id: \"imagemItemCardapio\",\n    onChange: handleChangeImagem,\n    ref: register({\n      required: {\n        value: \"Required\",\n        message: \"A imagem é obrigatória\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"error invalid-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 33\n    }\n  }, errors.imagem && errors.imagem.message)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"isCozinha\",\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    id: \"itemCozinhaCardapio\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: \"exampleCheck1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 33\n    }\n  }, \"Item de cozinha ?\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-check\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"isCardapio\",\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    id: \"isCardapio\",\n    onChange: handleChange,\n    defaultChecked: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: \"exampleCheck1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 33\n    }\n  }, \"Incluir no card\\xE1pio ?\")))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, \"Cadastrar\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary ml-3\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 25\n    }\n  }, \"Cancelar\")))), isLoadingVisible ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 33\n    }\n  }) : null);\n}","map":{"version":3,"sources":["/home/roberto/Área de Trabalho/tingle-bar/src/pages/PainelEstabelecimento/pages/GerenciarCardapio/ModalCadCardapio.jsx"],"names":["React","useState","useEffect","useForm","CurrencyInput","Swal","Modal","api","Loading","initialState","titulo","descricao","valor","categoria","tempoEstimadoMin","tempoEstimadoMax","imagem","isCozinha","isCardapio","ModalCadCardapio","props","categorias","setCategorias","valores","setValores","isLoadingVisible","setLoadingVisible","register","handleSubmit","errors","onSubmit","data","cadastrarItem","getCategorias","handleClose","setShowModal","response","get","idEstabelecimento","err","dados","FormData","append","post","headers","status","fire","atualizarItens","handleChange","event","name","value","target","handleChangeValor","maskedValue","floatValue","handleChangeImagem","e","files","showModal","required","message","valorItemCardapio","map","item","index","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport CurrencyInput from 'react-currency-input';\nimport Swal from 'sweetalert2';\nimport { Modal } from 'react-bootstrap';\n\nimport '../../../../components/Loading';\n\nimport api from '../../../../services/api';\nimport Loading from '../../../../components/Loading';\n\nfunction initialState() {\n    return {\n        titulo: '',\n        descricao: '',\n        valor: '',\n        categoria: '',\n        tempoEstimadoMin: 0,\n        tempoEstimadoMax: 0,\n        imagem: null,\n        isCozinha: false,\n        isCardapio: true\n    };\n}\n\nexport default function ModalCadCardapio(props) {\n    const [categorias, setCategorias] = useState([]);\n    const [valores, setValores] = useState(initialState);\n    const [isLoadingVisible, setLoadingVisible] = useState(false);\n\n    const { register, handleSubmit, errors } = useForm();\n\n    const onSubmit = data => {\n        cadastrarItem(data);\n    };\n\n    useEffect(() => {\n        getCategorias();\n    }, []);\n\n    const handleClose = () => props.setShowModal(false);\n\n    async function getCategorias() {\n        try {\n            const response = await api.get('/categoria?idEstabelecimento=' + props.idEstabelecimento);\n            setCategorias(response.data);\n            return response.data;\n        } catch (err) {\n            return err.response;\n        }\n    }\n\n    async function cadastrarItem(dados) {\n        setLoadingVisible(true);\n\n        const data = new FormData();\n\n        data.append(\"titulo\", dados.titulo);\n        data.append(\"descricao\", dados.descricao);\n        data.append(\"valor\", valores.valor);\n        data.append(\"tempo_estimado_min\", dados.tempoEstimadoMin);\n        data.append(\"tempo_estimado_max\", dados.tempoEstimadoMax);\n        data.append(\"categoria\", dados.categoria);\n        data.append(\"estabelecimento\", props.idEstabelecimento);\n        data.append(\"iscozinha\", valores.isCozinha ? 1 : 0);\n        data.append(\"iscardapio\", valores.isCardapio ? 1 : 0);\n        data.append(\"files\", valores.imagem);\n\n        try {\n            const response = await api.post('/Cardapio', data, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n\n            if (response.status === 201 || response.status === 200) {\n                Swal.fire('Sucesso!', 'Item cadastrado com sucesso!', 'success');\n            }\n        } catch (err) {\n            if (err.response.status === 401 || err.response.status === 400) {\n                Swal.fire('Erro!', 'Falha ao cadastrar item', 'error');\n            }\n        } finally {\n            setLoadingVisible(false);\n            props.atualizarItens();\n            handleClose();\n        }\n    }\n\n    function handleChange(event) {\n        const { name, value } = event.target;\n        setValores({ ...valores, [name]: value });\n    }\n\n    function handleChangeValor(event, maskedValue, floatValue) {\n        setValores({ ...valores, valor: floatValue });\n    }\n\n    function handleChangeImagem(e) {\n        setValores({ ...valores, imagem: e.target.files[0] });\n    }\n\n    return (\n        <>\n            <Modal\n                show={props.showModal}\n                onHide={handleClose}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Cadastro de item no Cardápio</Modal.Title>\n                </Modal.Header>\n\n                <form autoComplete=\"off\" onSubmit={handleSubmit(onSubmit)}>\n                    <Modal.Body>\n                        <div className=\"card-body\">\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"tituloItemCardapio\">Título</label>\n                                <input\n                                    name=\"titulo\"\n                                    type=\"text\"\n                                    className={errors.titulo ? \"form-control is-invalid\" : \"form-control\"}\n                                    id=\"tituloItemCardapio\"\n                                    placeholder=\"Título do item\"\n                                    onChange={handleChange}\n                                    ref={register({\n                                        required: {\n                                            value: \"Required\",\n                                            message: \"O título é obrigatório\"\n                                        },\n                                    })}\n                                />\n                                <span className=\"error invalid-feedback\">{errors.titulo && errors.titulo.message}</span>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"descricaoItemCardapio\">Descrição</label>\n                                <input\n                                    name=\"descricao\"\n                                    type=\"text\"\n                                    className={errors.descricao ? \"form-control is-invalid\" : \"form-control\"}\n                                    id=\"descricaoItemCardapio\"\n                                    placeholder=\"Descrição do item\"\n                                    onChange={handleChange}\n                                    ref={register({\n                                        required: {\n                                            value: \"Required\",\n                                            message: \"A descrição é obrigatória\"\n                                        },\n                                    })}\n                                />\n                                <span className=\"error invalid-feedback\">{errors.descricao && errors.descricao.message}</span>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"valorItemCardapio\">Valor</label>\n                                <CurrencyInput\n                                    name=\"valor\"\n                                    type=\"text\"\n                                    prefix=\"R$\"\n                                    decimalSeparator=\",\"\n                                    thousandSeparator=\".\"\n                                    value={valores.valor}\n                                    className={errors.valor ? \"form-control is-invalid\" : \"form-control\"}\n                                    id=\"valorItemCardapio\"\n                                    onChangeEvent={handleChangeValor}\n                                // ref={register({\n                                //     required: {\n                                //         value: \"Required\",\n                                //         message: \"O valor é obrigatório\"\n                                //     },\n                                // })}\n                                />\n                                <span className=\"error invalid-feedback\">{errors.valorItemCardapio && errors.valorItemCardapio.message}</span>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"categoriaItemCardapio\">Categoria</label>\n                                <select\n                                    name=\"categoria\"\n                                    className={errors.categoria ? \"form-control is-invalid\" : \"form-control\"}\n                                    id=\"categoriaItemCardapio\"\n                                    ref={register({\n                                        required: {\n                                            value: \"Required\",\n                                            message: \"A categoria é obrigatória\"\n                                        },\n                                    })}\n                                >\n                                    <option value=\"\">Selecione</option>\n                                    {categorias.map((item, index) => (\n                                        <option key={item.id} value={item.id}>{item.descricao}</option>\n                                    ))}\n                                </select>\n                                <span className=\"error invalid-feedback\">{errors.categoria && errors.categoria.message}</span>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"tempoEstimadoMin\">Tempo estimado mínimo</label>\n                                <input\n                                    name=\"tempoEstimadoMin\"\n                                    type=\"number\"\n                                    className={errors.tempoEstimadoMin ? \"form-control is-invalid\" : \"form-control\"}\n                                    id=\"tempoEstimadoMin\"\n                                    placeholder=\"Tempo mínimo estimado\"\n                                    onChange={handleChange}\n                                    ref={register({\n                                        required: {\n                                            value: \"Required\",\n                                            message: \"O tempo estimado min é obrigatório\"\n                                        },\n                                    })}\n                                />\n                                <span className=\"error invalid-feedback\">{errors.tempoEstimadoMin && errors.tempoEstimadoMin.message}</span>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"tempoEstimadoMax\">Tempo estimado máximo</label>\n                                <input\n                                    name=\"tempoEstimadoMax\"\n                                    type=\"number\"\n                                    className={errors.tempoEstimadoMax ? \"form-control is-invalid\" : \"form-control\"}\n                                    id=\"tempoEstimadoMax\"\n                                    placeholder=\"Tempo mínimo máximo\"\n                                    onChange={handleChange}\n                                    ref={register({\n                                        required: {\n                                            value: \"Required\",\n                                            message: \"O tempo estimado max é obrigatório\"\n                                        },\n                                    })}\n                                />\n                                <span className=\"error invalid-feedback\">{errors.tempoEstimadoMax && errors.tempoEstimadoMax.message}</span>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"imagemItemCardapio\">Imagem do item</label>\n                                <input\n                                    name=\"imagem\"\n                                    type=\"file\"\n                                    accept=\"image/png, image/jpeg\"\n                                    className={errors.imagem ? \"form-control-file is-invalid\" : \"form-control-file\"}\n                                    id=\"imagemItemCardapio\"\n                                    onChange={handleChangeImagem}\n                                    ref={register({\n                                        required: {\n                                            value: \"Required\",\n                                            message: \"A imagem é obrigatória\"\n                                        },\n                                    })}\n                                />\n                                <span className=\"error invalid-feedback\">{errors.imagem && errors.imagem.message}</span>\n                            </div>\n\n                            <div className=\"form-check\">\n                                <input\n                                    name=\"isCozinha\"\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"\n                                    id=\"itemCozinhaCardapio\"\n                                    onChange={handleChange}\n                                />\n                                <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Item de cozinha ?</label>\n                            </div>\n\n                            <div className=\"form-check\">\n                                <input\n                                    name=\"isCardapio\"\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"\n                                    id=\"isCardapio\"\n                                    onChange={handleChange}\n                                    defaultChecked={true}\n                                />\n                                <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Incluir no cardápio ?</label>\n                            </div>\n                        </div>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <button type=\"submit\" className=\"btn btn-primary\">Cadastrar</button>\n                        <button type=\"button\" className=\"btn btn-secondary ml-3\" onClick={handleClose}>Cancelar</button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n\n            {isLoadingVisible ? <Loading /> : null}\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}