{"ast":null,"code":"var _jsxFileName = \"/home/roberto/\\xC1rea de Trabalho/tingle-bar/src/contexts/auth-estabelecimento.jsx\";\nimport React, { useState, createContext, useEffect } from 'react';\nimport api from '../services/api';\nconst AuthContext = createContext();\nexport const AuthEstabelecimentoProvider = ({\n  children\n}) => {\n  const [estabelecimento, setEstabelecimento] = useState(null);\n  useEffect(() => {\n    async function loadStoragedData() {\n      const storagedEstabelecimento = await localStorage.getItem('@TBAuth:estabelecimento');\n      const storagedToken = await localStorage.getItem('@TBAuth:token');\n\n      if (storagedEstabelecimento && storagedToken) {\n        setEstabelecimento(JSON.parse(storagedEstabelecimento));\n      }\n    }\n  }, []);\n\n  async function signIn(credentials) {\n    try {\n      const payload = {\n        \"Cnpj\": credentials.cnpj,\n        \"Senha\": credentials.senha\n      };\n      const response = await api.post('/api/loginestabelecimento', payload);\n      const {\n        accessToken\n      } = response.data;\n      delete response.data.accessToken;\n      setEstabelecimento(response.data);\n      localStorage.setItem('@TBAuth:estabelecimento', JSON.stringify(response.data));\n      localStorage.setItem('@TBAuth:token', accessToken);\n      return response;\n    } catch (err) {\n      return err.response;\n    }\n  }\n\n  function signOut() {\n    localStorage.clear();\n    setEstabelecimento(null);\n  }\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      signed: !!estabelecimento,\n      estabelecimento,\n      signIn,\n      signOut\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, children);\n};\nexport default AuthContext;","map":{"version":3,"sources":["/home/roberto/Área de Trabalho/tingle-bar/src/contexts/auth-estabelecimento.jsx"],"names":["React","useState","createContext","useEffect","api","AuthContext","AuthEstabelecimentoProvider","children","estabelecimento","setEstabelecimento","loadStoragedData","storagedEstabelecimento","localStorage","getItem","storagedToken","JSON","parse","signIn","credentials","payload","cnpj","senha","response","post","accessToken","data","setItem","stringify","err","signOut","clear","signed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,MAAMC,WAAW,GAAGH,aAAa,EAAjC;AAEA,OAAO,MAAMI,2BAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,IAAD,CAAtD;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeO,gBAAf,GAAkC;AAC9B,YAAMC,uBAAuB,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqB,yBAArB,CAAtC;AACA,YAAMC,aAAa,GAAG,MAAMF,YAAY,CAACC,OAAb,CAAqB,eAArB,CAA5B;;AAEA,UAAIF,uBAAuB,IAAIG,aAA/B,EAA8C;AAC1CL,QAAAA,kBAAkB,CAACM,IAAI,CAACC,KAAL,CAAWL,uBAAX,CAAD,CAAlB;AACH;AACJ;AACJ,GATQ,EASN,EATM,CAAT;;AAWA,iBAAeM,MAAf,CAAsBC,WAAtB,EAAmC;AAC/B,QAAI;AACA,YAAMC,OAAO,GAAG;AACZ,gBAAQD,WAAW,CAACE,IADR;AAEZ,iBAASF,WAAW,CAACG;AAFT,OAAhB;AAKA,YAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,CAAS,2BAAT,EAAsCJ,OAAtC,CAAvB;AAEA,YAAM;AAAEK,QAAAA;AAAF,UAAkBF,QAAQ,CAACG,IAAjC;AACA,aAAOH,QAAQ,CAACG,IAAT,CAAcD,WAArB;AAEAf,MAAAA,kBAAkB,CAACa,QAAQ,CAACG,IAAV,CAAlB;AACAb,MAAAA,YAAY,CAACc,OAAb,CAAqB,yBAArB,EAAgDX,IAAI,CAACY,SAAL,CAAeL,QAAQ,CAACG,IAAxB,CAAhD;AACAb,MAAAA,YAAY,CAACc,OAAb,CAAqB,eAArB,EAAsCF,WAAtC;AAEA,aAAOF,QAAP;AACH,KAhBD,CAgBE,OAAOM,GAAP,EAAY;AACV,aAAOA,GAAG,CAACN,QAAX;AACH;AACJ;;AAED,WAASO,OAAT,GAAmB;AACfjB,IAAAA,YAAY,CAACkB,KAAb;AACArB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEsB,MAAAA,MAAM,EAAE,CAAC,CAACvB,eAAZ;AAA6BA,MAAAA,eAA7B;AAA8CS,MAAAA,MAA9C;AAAsDY,MAAAA;AAAtD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,QADL,CADJ;AAKH,CA9CM;AAgDP,eAAeF,WAAf","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nimport api from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const AuthEstabelecimentoProvider = ({ children }) => {\n    const [estabelecimento, setEstabelecimento] = useState(null);\n\n    useEffect(() => {\n        async function loadStoragedData() {\n            const storagedEstabelecimento = await localStorage.getItem('@TBAuth:estabelecimento');\n            const storagedToken = await localStorage.getItem('@TBAuth:token');\n\n            if (storagedEstabelecimento && storagedToken) {\n                setEstabelecimento(JSON.parse(storagedEstabelecimento));\n            }\n        }\n    }, []);\n\n    async function signIn(credentials) {\n        try {\n            const payload = {\n                \"Cnpj\": credentials.cnpj,\n                \"Senha\": credentials.senha\n            }\n\n            const response = await api.post('/api/loginestabelecimento', payload);\n\n            const { accessToken } = response.data;\n            delete response.data.accessToken;\n\n            setEstabelecimento(response.data);\n            localStorage.setItem('@TBAuth:estabelecimento', JSON.stringify(response.data));\n            localStorage.setItem('@TBAuth:token', accessToken);\n\n            return response;\n        } catch (err) {\n            return err.response;\n        }\n    }\n\n    function signOut() {\n        localStorage.clear();\n        setEstabelecimento(null);\n    }\n\n    return (\n        <AuthContext.Provider value={{ signed: !!estabelecimento, estabelecimento, signIn, signOut }}>\n            {children}\n        </AuthContext.Provider>\n    )\n};\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}